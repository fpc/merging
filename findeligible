#!/usr/bin/env bash

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

SVNFIXES="origin/svn/fixes_3_2"
FIXES="origin/fixes_3_2"
MAIN="origin/main"

SVNFIXES_HASH=`git log "$SVNFIXES" --pretty=format:"%h" | head -n 1`
MAIN_HASH=`git log "$MAIN" --pretty=format:"%h" | head -n 1`

FIXES_HASH=`git log "$FIXES" --pretty=format:"%h" | head -n 1`
GIT_START_HASH=37863a61

MERGE_BASE=`git merge-base $SVNFIXES_HASH $MAIN_HASH`

# GREPPATTERN='\-\-\- Merging .* into\|\* Merging revisions [0-9]* from\|\* Merging revisions .* from'
# get all merged revisions
git log $MERGE_BASE..$SVNFIXES_HASH | grep -oh "$GREPPATTERN" | sed 's/and/,/g' | tr -cd '[0-9,\n]' | tr ','  '\012' > mergedrevs

# get all trunk revisions
git log $MERGE_BASE..$MAIN_HASH | grep 'git-svn-id: trunk@[0-9]* -' | sed 's/[^0-9]*//g' > trunkrevs

# get all hashes of merged commits created in git
git log $SVNFIXES_HASH..$FIXES_HASH --grep="cherry picked from commit" | grep -oh "cherry picked from commit [0-9a-f]*" | sed 's/cherry picked from commit \([0-9a-f]*\)/\1/' > mergedhashes

# get all hashes of commits created to main in git
git log $GIT_START_HASH..HEAD --pretty=format:"%H" > mainhashes

# find all revs not in fixes but in trunk
# grep -Fxv -f mergedrevs trunkrevs > eligiblerevs
# use eligiblerevs retrieved from svn
cat $SCRIPTDIR/eligiblerevs > eligiblerevs

# find all hashes not in fixes but in main
grep -Fxv -f mergedhashes mainhashes > eligiblehashes

# use parallel: Tange (2011): GNU Parallel - The Command-Line Power Tool,
# ;login: The USENIX Magazine, February 2011:42-47.
# get eligible hashes from git times
parallel -j `nproc` git log --no-merges -1 <eligiblehashes
# get eligible revs from svn times
parallel -j `nproc` -I{} git log $MERGE_BASE..$TRUNK_HASH --grep='trunk@{}' <eligiblerevs

# cleanup
exit 0

rm mergedhashes
rm mergedrevs
rm mainhashes
rm trunkrevs
rm eligiblehashes
rm eligiblerevs
